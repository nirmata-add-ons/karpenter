---
kind: "ConfigMap"
apiVersion: "v1"
data:
  batchIdleDuration: "1s"
  batchMaxDuration: "10s"
binaryData: {}
metadata:
  namespace: "karpenter"
  annotations: {}
  name: "karpenter-global-settings"
  labels:
    helm.sh/chart: "karpenter-0.13.2"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "karpenter"
    app.kubernetes.io/instance: "karpenter"
    app.kubernetes.io/version: "0.13.2"

---
apiVersion: "policy/v1"
kind: "PodDisruptionBudget"
metadata:
  namespace: "karpenter"
  annotations: {}
  name: "karpenter"
  labels:
    app.kubernetes.io/name: "karpenter-v132"
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "karpenter"
      app.kubernetes.io/instance: "karpenter"
    matchExpressions: []

---
kind: "ConfigMap"
apiVersion: "v1"
data:
  zap-logger-config: "{\n  \"level\": \"debug\",\n  \"development\": false,\n  \"\
    disableStacktrace\": true,\n  \"disableCaller\": true,\n  \"sampling\": {\n  \
    \  \"initial\": 100,\n    \"thereafter\": 100\n  },\n  \"outputPaths\": [\"stdout\"\
    ],\n  \"errorOutputPaths\": [\"stderr\"],\n  \"encoding\": \"console\",\n  \"\
    encoderConfig\": {\n    \"timeKey\": \"time\",\n    \"levelKey\": \"level\",\n\
    \    \"nameKey\": \"logger\",\n    \"callerKey\": \"caller\",\n    \"messageKey\"\
    : \"message\",\n    \"stacktraceKey\": \"stacktrace\",\n    \"levelEncoder\":\
    \ \"capital\",\n    \"timeEncoder\": \"iso8601\"\n  }\n}\n"
binaryData: {}
metadata:
  namespace: "karpenter"
  annotations: {}
  name: "config-logging"
  labels:
    helm.sh/chart: "karpenter-0.13.2"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "karpenter"
    app.kubernetes.io/instance: "karpenter"
    app.kubernetes.io/version: "0.13.2"

---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  namespace: "karpenter"
  annotations: {}
  name: "karpenter"
  labels:
    helm.sh/chart: "karpenter-0.13.2"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "karpenter"
    app.kubernetes.io/instance: "karpenter"
    app.kubernetes.io/version: "0.13.2"

---
metadata:
  namespace: "karpenter"
  name: "defaulting.webhook.provisioners.karpenter.sh"
  labels:
    helm.sh/chart: "karpenter-0.13.2"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "karpenter"
    app.kubernetes.io/instance: "karpenter"
    app.kubernetes.io/version: "0.13.2"
apiVersion: "admissionregistration.k8s.io/v1"
webhooks:
- admissionReviewVersions:
  - "v1"
  name: "defaulting.webhook.provisioners.karpenter.sh"
  rules:
  - operations:
    - "CREATE"
    - "UPDATE"
    apiVersions:
    - "v1alpha1"
    scope: "*"
    resources:
    - "awsnodetemplates"
    - "awsnodetemplates/status"
    apiGroups:
    - "karpenter.k8s.aws"
  - operations:
    - "CREATE"
    - "UPDATE"
    apiVersions:
    - "v1alpha5"
    resources:
    - "provisioners"
    - "provisioners/status"
    apiGroups:
    - "karpenter.sh"
  clientConfig:
    service:
      name: "karpenter"
      namespace: "karpenter"
  failurePolicy: "Fail"
  sideEffects: "None"
kind: "MutatingWebhookConfiguration"

---
metadata:
  namespace: "karpenter"
  name: "validation.webhook.config.karpenter.sh"
  labels:
    helm.sh/chart: "karpenter-0.13.2"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "karpenter"
    app.kubernetes.io/instance: "karpenter"
    app.kubernetes.io/version: "0.13.2"
apiVersion: "admissionregistration.k8s.io/v1"
webhooks:
- admissionReviewVersions:
  - "v1"
  name: "validation.webhook.config.karpenter.sh"
  clientConfig:
    service:
      name: "karpenter"
      namespace: "karpenter"
  objectSelector:
    matchLabels:
      app.kubernetes.io/part-of: "karpenter"
  failurePolicy: "Fail"
  sideEffects: "None"
kind: "ValidatingWebhookConfiguration"

---
kind: "Deployment"
apiVersion: "apps/v1"
metadata:
  namespace: "karpenter"
  annotations: {}
  name: "karpenter"
  labels:
    helm.sh/chart: "karpenter-0.13.2"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "karpenter"
    app.kubernetes.io/instance: "karpenter"
    app.kubernetes.io/version: "0.13.2"
    app.kubernetes.io/component: "deployment.karpenter"
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app.kubernetes.io/name: "karpenter"
      app.kubernetes.io/instance: "karpenter"
    matchExpressions: []
  strategy:
    type: "Recreate"
  template:
    metadata:
      annotations: {}
      labels:
        app.kubernetes.io/name: "karpenter"
        app.kubernetes.io/instance: "karpenter"
        app.kubernetes.io/component: "deployment.karpenter"
    spec:
      topologySpreadConstraints:
      - whenUnsatisfiable: "ScheduleAnyway"
        maxSkew: 1
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: "karpenter"
            app.kubernetes.io/instance: "karpenter"
        topologyKey: "topology.kubernetes.io/zone"
      terminationGracePeriodSeconds: 30
      nodeSelector:
        kubernetes.io/os: "linux"
      serviceAccountName: "karpenter"
      priorityClassName: "system-cluster-critical"
      dnsPolicy: "ClusterFirst"
      containers:
      - name: "controller"
        image: "public.ecr.aws/karpenter/controller:v0.13.2@sha256:af463b2ab0a9b7b1fdf0991ee733dd8bcf5eabf80907f69ceddda28556aead31"
        command: []
        args: []
        imagePullPolicy: "IfNotPresent"
        ports:
        - name: "http-metrics"
          containerPort: 8080
          protocol: "TCP"
        - name: "http"
          containerPort: 8081
          protocol: "TCP"
        env:
        - name: "KARPENTER_SERVICE"
          value: "karpenter"
        - name: "SYSTEM_NAMESPACE"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "metadata.namespace"
        - name: "CLUSTER_ENDPOINT"
          value: "https://B2EF99D4A671395C2EA091D205632D21.gr7.us-west-1.eks.amazonaws.com"
        - name: "CLUSTER_NAME"
          value: "eks-demo-bottlerocket-cluster-tezlkp"
        livenessProbe:
          initialDelaySeconds: 30
          timeoutSeconds: 1
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
          httpGet:
            path: "/healthz"
            port: "http"
        readinessProbe:
          timeoutSeconds: 1
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
          httpGet:
            path: "/readyz"
            port: "http"
        resources:
          limits:
            cpu: "1"
            memory: "1Gi"
          requests:
            cpu: "1"
            memory: "1Gi"
      - name: "webhook"
        image: "public.ecr.aws/karpenter/webhook:v0.13.2@sha256:e10488262a58173911d2b17d6ef1385979e33334807efd8783e040aa241dd239"
        command: []
        args:
        - "-port=8443"
        imagePullPolicy: "IfNotPresent"
        ports:
        - name: "https-webhook"
          containerPort: 8443
          protocol: "TCP"
        env:
        - name: "KUBERNETES_MIN_VERSION"
          value: "1.19.0-0"
        - name: "KARPENTER_SERVICE"
          value: "karpenter"
        - name: "SYSTEM_NAMESPACE"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "metadata.namespace"
        - name: "CLUSTER_ENDPOINT"
          value: "https://B2EF99D4A671395C2EA091D205632D21.gr7.us-west-1.eks.amazonaws.com"
        - name: "CLUSTER_NAME"
          value: "eks-demo-bottlerocket-cluster-tezlkp"
        livenessProbe:
          initialDelaySeconds: 30
          timeoutSeconds: 1
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
          httpGet:
            port: "https-webhook"
            scheme: "HTTPS"
        readinessProbe:
          timeoutSeconds: 1
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
          httpGet:
            port: "https-webhook"
            scheme: "HTTPS"
        resources:
          limits:
            cpu: "100m"
            memory: "50Mi"
          requests:
            cpu: "100m"
            memory: "50Mi"
      securityContext:
        fsGroup: 1000
        supplementalGroups: []
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "karpenter.sh/provisioner-name"
                operator: "DoesNotExist"
                values: []

---
apiVersion: "apiextensions.k8s.io/v1"
kind: "CustomResourceDefinition"
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: "v0.8.0"
  name: "provisioners.karpenter.sh"
  labels:
    app.kubernetes.io/name: "karpenter-v132"
spec:
  group: "karpenter.sh"
  scope: "Cluster"
  names:
    categories:
    - "karpenter"
    kind: "Provisioner"
    listKind: "ProvisionerList"
    plural: "provisioners"
    shortNames: []
    singular: "provisioner"
  versions:
  - name: "v1alpha5"
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        description: "Provisioner is the Schema for the Provisioners API"
        type: "object"
        properties:
          metadata:
            type: "object"
          apiVersion:
            description: "APIVersion defines the versioned schema of this representation\
              \ of an object. Servers should convert recognized schemas to the latest\
              \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
            type: "string"
          kind:
            description: "Kind is a string value representing the REST resource this\
              \ object represents. Servers may infer this from the endpoint the client\
              \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
            type: "string"
          spec:
            description: "ProvisionerSpec is the top level provisioner specification.\
              \ Provisioners launch nodes in response to pods that are unschedulable.\
              \ A single provisioner is capable of managing a diverse set of nodes.\
              \ Node properties are determined from a combination of provisioner and\
              \ pod scheduling constraints."
            type: "object"
            properties:
              providerRef:
                description: "ProviderRef is a reference to a dedicated CRD for the\
                  \ chosen provider, that holds additional configuration options"
                type: "object"
                properties:
                  apiVersion:
                    description: "API version of the referent"
                    type: "string"
                  kind:
                    description: "Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\""
                    type: "string"
                  name:
                    description: "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names"
                    type: "string"
              requirements:
                description: "Requirements are layered with Labels and applied to\
                  \ every node."
                type: "array"
                items:
                  description: "A node selector requirement is a selector that contains\
                    \ values, a key, and an operator that relates the key and values."
                  type: "object"
                  properties:
                    values:
                      description: "An array of string values. If the operator is\
                        \ In or NotIn, the values array must be non-empty. If the\
                        \ operator is Exists or DoesNotExist, the values array must\
                        \ be empty. If the operator is Gt or Lt, the values array\
                        \ must have a single element, which will be interpreted as\
                        \ an integer. This array is replaced during a strategic merge\
                        \ patch."
                      type: "array"
                      items:
                        type: "string"
                    key:
                      description: "The label key that the selector applies to."
                      type: "string"
                    operator:
                      description: "Represents a key's relationship to a set of values.\
                        \ Valid operators are In, NotIn, Exists, DoesNotExist. Gt,\
                        \ and Lt."
                      type: "string"
                  required:
                  - "key"
                  - "operator"
              startupTaints:
                description: "StartupTaints are taints that are applied to nodes upon\
                  \ startup which are expected to be removed automatically within\
                  \ a short period of time, typically by a DaemonSet that tolerates\
                  \ the taint. These are commonly used by daemonsets to allow initialization\
                  \ and enforce startup ordering.  StartupTaints are ignored for provisioning\
                  \ purposes in that pods are not required to tolerate a StartupTaint\
                  \ in order to have nodes provisioned for them."
                type: "array"
                items:
                  description: "The node this Taint is attached to has the \"effect\"\
                    \ on any pod that does not tolerate the Taint."
                  type: "object"
                  properties:
                    timeAdded:
                      format: "date-time"
                      description: "TimeAdded represents the time at which the taint\
                        \ was added. It is only written for NoExecute taints."
                      type: "string"
                    effect:
                      description: "Required. The effect of the taint on pods that\
                        \ do not tolerate the taint. Valid effects are NoSchedule,\
                        \ PreferNoSchedule and NoExecute."
                      type: "string"
                    value:
                      description: "The taint value corresponding to the taint key."
                      type: "string"
                    key:
                      description: "Required. The taint key to be applied to a node."
                      type: "string"
                  required:
                  - "effect"
                  - "key"
              ttlSecondsAfterEmpty:
                format: "int64"
                description: "TTLSecondsAfterEmpty is the number of seconds the controller\
                  \ will wait before attempting to delete a node, measured from when\
                  \ the node is detected to be empty. A Node is considered to be empty\
                  \ when it does not have pods scheduled to it, excluding daemonsets.\
                  \ \n Termination due to underutilization is disabled if this field\
                  \ is not set."
                type: "integer"
              ttlSecondsUntilExpired:
                format: "int64"
                description: "TTLSecondsUntilExpired is the number of seconds the\
                  \ controller will wait before terminating a node, measured from\
                  \ when the node is created. This is useful to implement features\
                  \ like eventually consistent node upgrade, memory leak protection,\
                  \ and disruption testing. \n Termination due to expiration is disabled\
                  \ if this field is not set."
                type: "integer"
              kubeletConfiguration:
                description: "KubeletConfiguration are options passed to the kubelet\
                  \ when provisioning nodes"
                type: "object"
                properties:
                  containerRuntime:
                    description: "ContainerRuntime is the container runtime to be\
                      \ used with your worker nodes."
                    type: "string"
                  clusterDNS:
                    description: "clusterDNS is a list of IP addresses for the cluster\
                      \ DNS server. Note that not all providers may use all addresses."
                    type: "array"
                    items:
                      type: "string"
              provider:
                x-kubernetes-preserve-unknown-fields: true
                description: "Provider contains fields specific to your cloudprovider."
                type: "object"
              taints:
                description: "Taints will be applied to every node launched by the\
                  \ Provisioner. If specified, the provisioner will not provision\
                  \ nodes for pods that do not have matching tolerations. Additional\
                  \ taints will be created that match pod tolerations on a per-node\
                  \ basis."
                type: "array"
                items:
                  description: "The node this Taint is attached to has the \"effect\"\
                    \ on any pod that does not tolerate the Taint."
                  type: "object"
                  properties:
                    timeAdded:
                      format: "date-time"
                      description: "TimeAdded represents the time at which the taint\
                        \ was added. It is only written for NoExecute taints."
                      type: "string"
                    effect:
                      description: "Required. The effect of the taint on pods that\
                        \ do not tolerate the taint. Valid effects are NoSchedule,\
                        \ PreferNoSchedule and NoExecute."
                      type: "string"
                    value:
                      description: "The taint value corresponding to the taint key."
                      type: "string"
                    key:
                      description: "Required. The taint key to be applied to a node."
                      type: "string"
                  required:
                  - "effect"
                  - "key"
              limits:
                description: "Limits define a set of bounds for provisioning capacity."
                type: "object"
                properties:
                  resources:
                    description: "Resources contains all the allocatable resources\
                      \ that Karpenter supports for limiting."
                    additionalProperties:
                      x-kubernetes-int-or-string: true
                      pattern: "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\
                        +|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                      anyOf:
                      - type: "integer"
                      - type: "string"
                    type: "object"
              labels:
                description: "Labels are layered with Requirements and applied to\
                  \ every node."
                additionalProperties:
                  type: "string"
                type: "object"
          status:
            description: "ProvisionerStatus defines the observed state of Provisioner"
            type: "object"
            properties:
              resources:
                description: "Resources is the list of resources that have been provisioned."
                additionalProperties:
                  x-kubernetes-int-or-string: true
                  pattern: "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\
                    +|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                  anyOf:
                  - type: "integer"
                  - type: "string"
                type: "object"
              conditions:
                description: "Conditions is the set of conditions required for this\
                  \ provisioner to scale its target, and indicates whether or not\
                  \ those conditions are met."
                type: "array"
                items:
                  description: "Condition defines a readiness condition for a Knative\
                    \ resource. See: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties"
                  type: "object"
                  properties:
                    severity:
                      description: "Severity with which to treat failures of this\
                        \ type of condition. When this is not specified, it defaults\
                        \ to Error."
                      type: "string"
                    reason:
                      description: "The reason for the condition's last transition."
                      type: "string"
                    lastTransitionTime:
                      description: "LastTransitionTime is the last time the condition\
                        \ transitioned from one status to another. We use VolatileTime\
                        \ in place of metav1.Time to exclude this from creating equality.Semantic\
                        \ differences (all other things held constant)."
                      type: "string"
                    message:
                      description: "A human readable message indicating details about\
                        \ the transition."
                      type: "string"
                    type:
                      description: "Type of condition."
                      type: "string"
                    status:
                      description: "Status of the condition, one of True, False, Unknown."
                      type: "string"
                  required:
                  - "status"
                  - "type"
              lastScaleTime:
                format: "date-time"
                description: "LastScaleTime is the last time the Provisioner scaled\
                  \ the number of nodes"
                type: "string"
    subresources:
      status: {}

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRole"
rules:
- apiGroups:
  - "karpenter.sh"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "provisioners"
  - "provisioners/status"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - "karpenter.k8s.aws"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "awsnodetemplates"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "pods"
  - "nodes"
  - "persistentvolumes"
  - "persistentvolumeclaims"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - "storage.k8s.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "storageclasses"
  - "csinodes"
  verbs:
  - "get"
  - "watch"
  - "list"
- apiGroups:
  - "apps"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "daemonsets"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - "admissionregistration.k8s.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "validatingwebhookconfigurations"
  - "mutatingwebhookconfigurations"
  verbs:
  - "get"
  - "watch"
  - "list"
- apiGroups:
  - "karpenter.sh"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "provisioners/status"
  verbs:
  - "create"
  - "delete"
  - "patch"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "events"
  verbs:
  - "create"
  - "patch"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "nodes"
  verbs:
  - "create"
  - "patch"
  - "delete"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "pods/eviction"
  verbs:
  - "create"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "persistentvolumeclaims"
  verbs:
  - "update"
- apiGroups:
  - "admissionregistration.k8s.io"
  nonResourceURLs: []
  resourceNames:
  - "validation.webhook.provisioners.karpenter.sh"
  - "validation.webhook.config.karpenter.sh"
  resources:
  - "validatingwebhookconfigurations"
  verbs:
  - "update"
- apiGroups:
  - "admissionregistration.k8s.io"
  nonResourceURLs: []
  resourceNames:
  - "defaulting.webhook.provisioners.karpenter.sh"
  resources:
  - "mutatingwebhookconfigurations"
  verbs:
  - "update"
metadata:
  annotations: {}
  name: "karpenter"
  labels:
    helm.sh/chart: "karpenter-0.13.2"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "karpenter"
    app.kubernetes.io/instance: "karpenter"
    app.kubernetes.io/version: "0.13.2"

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRoleBinding"
metadata:
  annotations: {}
  name: "karpenter"
  labels:
    helm.sh/chart: "karpenter-0.13.2"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "karpenter"
    app.kubernetes.io/instance: "karpenter"
    app.kubernetes.io/version: "0.13.2"
subjects:
- kind: "ServiceAccount"
  name: "karpenter"
  namespace: "karpenter"
roleRef:
  apiGroup: "rbac.authorization.k8s.io"
  kind: "ClusterRole"
  name: "karpenter"

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "RoleBinding"
metadata:
  namespace: "karpenter"
  annotations: {}
  name: "karpenter"
  labels:
    helm.sh/chart: "karpenter-0.13.2"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "karpenter"
    app.kubernetes.io/instance: "karpenter"
    app.kubernetes.io/version: "0.13.2"
roleRef:
  apiGroup: "rbac.authorization.k8s.io"
  kind: "Role"
  name: "karpenter"
subjects:
- kind: "ServiceAccount"
  name: "karpenter"
  namespace: "karpenter"

---
kind: "Secret"
apiVersion: "v1"
data: {}
type: "Opaque"
metadata:
  namespace: "karpenter"
  annotations: {}
  name: "karpenter-cert"
  labels:
    helm.sh/chart: "karpenter-0.13.2"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "karpenter"
    app.kubernetes.io/instance: "karpenter"
    app.kubernetes.io/version: "0.13.2"

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "Role"
metadata:
  namespace: "karpenter"
  annotations: {}
  name: "karpenter"
  labels:
    helm.sh/chart: "karpenter-0.13.2"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "karpenter"
    app.kubernetes.io/instance: "karpenter"
    app.kubernetes.io/version: "0.13.2"
rules:
- apiGroups:
  - "coordination.k8s.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "leases"
  verbs:
  - "get"
  - "watch"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "configmaps"
  - "namespaces"
  - "secrets"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames:
  - "karpenter-cert"
  resources:
  - "secrets"
  verbs:
  - "update"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames:
  - "karpenter-global-settings"
  - "config-logging"
  resources:
  - "configmaps"
  verbs:
  - "update"
  - "patch"
  - "delete"
- apiGroups:
  - "coordination.k8s.io"
  nonResourceURLs: []
  resourceNames:
  - "karpenter-leader-election"
  - "webhook.configmapwebhook.00-of-01"
  - "webhook.defaultingwebhook.00-of-01"
  - "webhook.validationwebhook.00-of-01"
  - "webhook.webhookcertificates.00-of-01"
  resources:
  - "leases"
  verbs:
  - "patch"
  - "update"
- apiGroups:
  - "coordination.k8s.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "leases"
  verbs:
  - "create"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "configmaps"
  verbs:
  - "create"

---
apiVersion: "v1"
kind: "Service"
metadata:
  namespace: "karpenter"
  annotations: {}
  name: "karpenter"
  labels:
    helm.sh/chart: "karpenter-0.13.2"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "karpenter"
    app.kubernetes.io/instance: "karpenter"
    app.kubernetes.io/version: "0.13.2"
spec:
  externalIPs: []
  loadBalancerSourceRanges: []
  type: "ClusterIP"
  selector:
    app.kubernetes.io/name: "karpenter"
    app.kubernetes.io/instance: "karpenter"
  ports:
  - name: "http-metrics"
    port: 8080
    protocol: "TCP"
    targetPort: "http-metrics"
  - name: "https-webhook"
    port: 443
    protocol: "TCP"
    targetPort: "https-webhook"

---
apiVersion: "apiextensions.k8s.io/v1"
kind: "CustomResourceDefinition"
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: "v0.8.0"
  name: "awsnodetemplates.karpenter.k8s.aws"
  labels:
    app.kubernetes.io/name: "karpenter-v132"
spec:
  group: "karpenter.k8s.aws"
  scope: "Cluster"
  names:
    categories:
    - "karpenter"
    kind: "AWSNodeTemplate"
    listKind: "AWSNodeTemplateList"
    plural: "awsnodetemplates"
    shortNames: []
    singular: "awsnodetemplate"
  versions:
  - name: "v1alpha1"
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        description: "AWSNodeTemplate is the Schema for the AWSNodeTemplate API"
        type: "object"
        properties:
          metadata:
            type: "object"
          apiVersion:
            description: "APIVersion defines the versioned schema of this representation\
              \ of an object. Servers should convert recognized schemas to the latest\
              \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
            type: "string"
          kind:
            description: "Kind is a string value representing the REST resource this\
              \ object represents. Servers may infer this from the endpoint the client\
              \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
            type: "string"
          spec:
            description: "AWSNodeTemplateSpec is the top level specification for the\
              \ AWS Karpenter Provider. This will contain configuration necessary\
              \ to launch instances in AWS."
            type: "object"
            properties:
              apiVersion:
                description: "APIVersion defines the versioned schema of this representation\
                  \ of an object. Servers should convert recognized schemas to the\
                  \ latest internal value, and may reject unrecognized values. More\
                  \ info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
                type: "string"
              userData:
                description: "UserData to be applied to the provisioned nodes. It\
                  \ must be in the appropriate format based on the AMIFamily in use.\
                  \ Karpenter will merge certain fields into this UserData to ensure\
                  \ nodes are being provisioned with the correct configuration."
                type: "string"
              blockDeviceMappings:
                description: "BlockDeviceMappings to be applied to provisioned nodes."
                type: "array"
                items:
                  type: "object"
                  properties:
                    ebs:
                      description: "EBS contains parameters used to automatically\
                        \ set up EBS volumes when an instance is launched."
                      type: "object"
                      properties:
                        volumeType:
                          description: "VolumeType of the block device. For more information,\
                            \ see Amazon EBS volume types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html)\
                            \ in the Amazon Elastic Compute Cloud User Guide."
                          type: "string"
                        snapshotID:
                          description: "SnapshotID is the ID of an EBS snapshot"
                          type: "string"
                        encrypted:
                          description: "Encrypted indicates whether the EBS volume\
                            \ is encrypted. Encrypted volumes can only be attached\
                            \ to instances that support Amazon EBS encryption. If\
                            \ you are creating a volume from a snapshot, you can't\
                            \ specify an encryption value."
                          type: "boolean"
                        iops:
                          format: "int64"
                          description: "IOPS is the number of I/O operations per second\
                            \ (IOPS). For gp3, io1, and io2 volumes, this represents\
                            \ the number of IOPS that are provisioned for the volume.\
                            \ For gp2 volumes, this represents the baseline performance\
                            \ of the volume and the rate at which the volume accumulates\
                            \ I/O credits for bursting. \n The following are the supported\
                            \ values for each volume type: \n * gp3: 3,000-16,000\
                            \ IOPS \n * io1: 100-64,000 IOPS \n * io2: 100-64,000\
                            \ IOPS \n For io1 and io2 volumes, we guarantee 64,000\
                            \ IOPS only for Instances built on the Nitro System (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances).\
                            \ Other instance families guarantee performance up to\
                            \ 32,000 IOPS. \n This parameter is supported for io1,\
                            \ io2, and gp3 volumes only. This parameter is not supported\
                            \ for gp2, st1, sc1, or standard volumes."
                          type: "integer"
                        deleteOnTermination:
                          description: "DeleteOnTermination indicates whether the\
                            \ EBS volume is deleted on instance termination."
                          type: "boolean"
                        kmsKeyID:
                          description: "KMSKeyID (ARN) of the symmetric Key Management\
                            \ Service (KMS) CMK used for encryption."
                          type: "string"
                        throughput:
                          format: "int64"
                          description: "Throughput to provision for a gp3 volume,\
                            \ with a maximum of 1,000 MiB/s. Valid Range: Minimum\
                            \ value of 125. Maximum value of 1000."
                          type: "integer"
                        volumeSize:
                          x-kubernetes-int-or-string: true
                          pattern: "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\
                            +|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                          anyOf:
                          - type: "integer"
                          - type: "string"
                          description: "VolumeSize in GiBs. You must specify either\
                            \ a snapshot ID or a volume size. The following are the\
                            \ supported volumes sizes for each volume type: \n * gp2\
                            \ and gp3: 1-16,384 \n * io1 and io2: 4-16,384 \n * st1\
                            \ and sc1: 125-16,384 \n * standard: 1-1,024"
                    deviceName:
                      description: "The device name (for example, /dev/sdh or xvdh)."
                      type: "string"
              instanceProfile:
                description: "InstanceProfile is the AWS identity that instances use."
                type: "string"
              kind:
                description: "Kind is a string value representing the REST resource\
                  \ this object represents. Servers may infer this from the endpoint\
                  \ the client submits requests to. Cannot be updated. In CamelCase.\
                  \ More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
                type: "string"
              metadataOptions:
                description: "MetadataOptions for the generated launch template of\
                  \ provisioned nodes. \n This specifies the exposure of the Instance\
                  \ Metadata Service to provisioned EC2 nodes. For more information,\
                  \ see Instance Metadata and User Data (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html)\
                  \ in the Amazon Elastic Compute Cloud User Guide. \n Refer to recommended,\
                  \ security best practices (https://aws.github.io/aws-eks-best-practices/security/docs/iam/#restrict-access-to-the-instance-profile-assigned-to-the-worker-node)\
                  \ for limiting exposure of Instance Metadata and User Data to pods.\
                  \ If omitted, defaults to httpEndpoint enabled, with httpProtocolIPv6\
                  \ disabled, with httpPutResponseLimit of 2, and with httpTokens\
                  \ required."
                type: "object"
                properties:
                  httpPutResponseHopLimit:
                    format: "int64"
                    description: "HTTPPutResponseHopLimit is the desired HTTP PUT\
                      \ response hop limit for instance metadata requests. The larger\
                      \ the number, the further instance metadata requests can travel.\
                      \ Possible values are integers from 1 to 64. If metadata options\
                      \ is non-nil, but this parameter is not specified, the default\
                      \ value is 1."
                    type: "integer"
                  httpEndpoint:
                    description: "HTTPEndpoint enables or disables the HTTP metadata\
                      \ endpoint on provisioned nodes. If metadata options is non-nil,\
                      \ but this parameter is not specified, the default state is\
                      \ \"enabled\". \n If you specify a value of \"disabled\", instance\
                      \ metadata will not be accessible on the node."
                    type: "string"
                  httpProtocolIPv6:
                    description: "HTTPProtocolIPv6 enables or disables the IPv6 endpoint\
                      \ for the instance metadata service on provisioned nodes. If\
                      \ metadata options is non-nil, but this parameter is not specified,\
                      \ the default state is \"disabled\"."
                    type: "string"
                  httpTokens:
                    description: "HTTPTokens determines the state of token usage for\
                      \ instance metadata requests. If metadata options is non-nil,\
                      \ but this parameter is not specified, the default state is\
                      \ \"optional\". \n If the state is optional, one can choose\
                      \ to retrieve instance metadata with or without a signed token\
                      \ header on the request. If one retrieves the IAM role credentials\
                      \ without a token, the version 1.0 role credentials are returned.\
                      \ If one retrieves the IAM role credentials using a valid signed\
                      \ token, the version 2.0 role credentials are returned. \n If\
                      \ the state is \"required\", one must send a signed token header\
                      \ with any instance metadata retrieval requests. In this state,\
                      \ retrieving the IAM role credentials always returns the version\
                      \ 2.0 credentials; the version 1.0 credentials are not available."
                    type: "string"
              amiFamily:
                description: "AMIFamily is the AMI family that instances use."
                type: "string"
              securityGroupSelector:
                description: "SecurityGroups specify the names of the security groups."
                additionalProperties:
                  type: "string"
                type: "object"
              launchTemplate:
                description: "LaunchTemplateName for the node. If not specified, a\
                  \ launch template will be generated. NOTE: This field is for specifying\
                  \ a custom launch template and is exposed in the Spec as `launchTemplate`\
                  \ for backwards compatibility."
                type: "string"
              subnetSelector:
                description: "SubnetSelector discovers subnets by tags. A value of\
                  \ \"\" is a wildcard."
                additionalProperties:
                  type: "string"
                type: "object"
              tags:
                description: "Tags to be applied on ec2 resources like instances and\
                  \ launch templates."
                additionalProperties:
                  type: "string"
                type: "object"
    subresources:
      status: {}

---
metadata:
  namespace: "karpenter"
  name: "validation.webhook.provisioners.karpenter.sh"
  labels:
    helm.sh/chart: "karpenter-0.13.2"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "karpenter"
    app.kubernetes.io/instance: "karpenter"
    app.kubernetes.io/version: "0.13.2"
apiVersion: "admissionregistration.k8s.io/v1"
webhooks:
- admissionReviewVersions:
  - "v1"
  name: "validation.webhook.provisioners.karpenter.sh"
  rules:
  - operations:
    - "CREATE"
    - "UPDATE"
    - "DELETE"
    apiVersions:
    - "v1alpha1"
    scope: "*"
    resources:
    - "awsnodetemplates"
    - "awsnodetemplates/status"
    apiGroups:
    - "karpenter.k8s.aws"
  - operations:
    - "CREATE"
    - "UPDATE"
    - "DELETE"
    apiVersions:
    - "v1alpha5"
    resources:
    - "provisioners"
    - "provisioners/status"
    apiGroups:
    - "karpenter.sh"
  clientConfig:
    service:
      name: "karpenter"
      namespace: "karpenter"
  failurePolicy: "Fail"
  sideEffects: "None"
kind: "ValidatingWebhookConfiguration"
